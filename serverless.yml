# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: quietthyme-api # NOTE: update this with your service name

provider:
  cfLogs: true
  name: aws
  stage: 'beta'
  region: us-east-1
  timeout: 40 # optional, default is 6
  runtime: nodejs6.10
  memorySize: 256
  environment:
    DOMAIN: api.quietthyme.com
    DEPLOY_SHA: ${env:CIRCLE_SHA1}
    STAGE: ${opt:stage, self:provider.stage}
    STORAGE_SALT: ${env:${opt:stage, self:provider.stage}_STORAGE_SALT, env:STORAGE_SALT}
    ENCRYPTION_JWT_PASSPHRASE: ${env:${opt:stage, self:provider.stage}_ENCRYPTION_JWT_PASSPHRASE, env:ENCRYPTION_JWT_PASSPHRASE}
    # OAUTH_BOX_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_BOX_CLIENT_KEY, env:OAUTH_BOX_CLIENT_KEY}
    # OAUTH_BOX_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_BOX_CLIENT_SECRET, env:OAUTH_BOX_CLIENT_SECRET}
    # OAUTH_DROPBOX_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_DROPBOX_CLIENT_KEY, env:OAUTH_DROPBOX_CLIENT_KEY}
    # OAUTH_DROPBOX_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_DROPBOX_CLIENT_SECRET, env:OAUTH_DROPBOX_CLIENT_SECRET}
    # OAUTH_GOOGLE_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_GOOGLE_CLIENT_KEY, env:OAUTH_GOOGLE_CLIENT_KEY}
    # OAUTH_GOOGLE_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_GOOGLE_CLIENT_SECRET, env:OAUTH_GOOGLE_CLIENT_SECRET}
    # OAUTH_SKYDRIVE_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_SKYDRIVE_CLIENT_KEY, env:OAUTH_SKYDRIVE_CLIENT_KEY}
    # OAUTH_SKYDRIVE_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_SKYDRIVE_CLIENT_SECRET, env:OAUTH_SKYDRIVE_CLIENT_SECRET}
    GOOGLE_ANALYTICS_ACCOUNT_ID: ${env:${opt:stage, self:provider.stage}_GOOGLE_ANALYTICS_ACCOUNT_ID, env:GOOGLE_ANALYTICS_ACCOUNT_ID}
    STRIPE_SECRET_KEY: ${env:${opt:stage, self:provider.stage}_STRIPE_SECRET_KEY, env:STRIPE_SECRET_KEY}
    OAUTH_GOODREADS_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_GOODREADS_CLIENT_KEY, env:OAUTH_GOODREADS_CLIENT_KEY}
    OAUTH_GOODREADS_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_GOODREADS_CLIENT_SECRET, env:OAUTH_GOODREADS_CLIENT_SECRET}
    KLOUDLESS_API_ID: ${env:${opt:stage, self:provider.stage}_KLOUDLESS_API_ID, env:KLOUDLESS_API_ID}
    KLOUDLESS_API_KEY: ${env:${opt:stage, self:provider.stage}_KLOUDLESS_API_KEY, env:KLOUDLESS_API_KEY}
    PUSH_NOTIFY_PUBLIC_KEY: ${env:${opt:stage, self:provider.stage}_PUSH_NOTIFY_PUBLIC_KEY, env:PUSH_NOTIFY_PUBLIC_KEY}
    PUSH_NOTIFY_PRIVATE_KEY: ${env:${opt:stage, self:provider.stage}_PUSH_NOTIFY_PRIVATE_KEY, env:PUSH_NOTIFY_PRIVATE_KEY}
    MAILCHIMP_API_KEY: ${env:${opt:stage, self:provider.stage}_MAILCHIMP_API_KEY, env:MAILCHIMP_API_KEY}
    MAILCHIMP_LIST_ID: ${env:${opt:stage, self:provider.stage}_MAILCHIMP_LIST_ID, env:MAILCHIMP_LIST_ID}
    MAILGUN_API_KEY: ${env:${opt:stage, self:provider.stage}_MAILGUN_API_KEY, env:MAILGUN_API_KEY}
    ROLLBAR_PUSH_API_KEY: ${env:${opt:stage, self:provider.stage}_ROLLBAR_PUSH_API_KEY, env:ROLLBAR_PUSH_API_KEY}
    DEBUG: ${self:custom.variables.${opt:stage, self:provider.stage}.debug}
    NODE_ENV: production


  #TODO: these vpc rules are required because we've hardcoded postgres connection during testing.
  #in prod, this will be specified dynamically via cloudformation.
  # because of issues like: https://github.com/serverless/serverless/issues/2780 on first deploy make sure to comment out
  # the vpc section, and uncomment it after a successful deploy.
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:*/${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:*:${self:service}-${opt:stage, self:provider.stage}-queueprocessunknownbook" # triggers the process_unknown_processor
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:*:${self:service}-${opt:stage, self:provider.stage}-queueprocessdeletecredentialbooks" # triggers the process_delete_credential_books
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:*:${self:service}-${opt:stage, self:provider.stage}-queueprocessdeletebook" # triggers the process_delete_book
#  vpc:
#    securityGroupIds:
#      - sg-bbb818c3
#    subnetIds:
#      - subnet-afea3085
#      - subnet-297de85f

custom:
  variables:
    master:
      cleanup_enabled: true
      debug: ''
    beta:
      cleanup_enabled: false
      debug: quietthyme:*
  capacities:
    - table: QuietThymeBooksTable2  # DynamoDB Resource
      read:
        minimum: 2        # Minimum read capacity
        maximum: 100     # Maximum read capacity
        usage: 0.75       # Targeted usage percentage
      write:
        minimum: 5       # Minimum write capacity
        maximum: 100      # Maximum write capacity
        usage: 0.5        # Targeted usage percentage


# you can add packaging information here
package:
#  individually: true # required for https://github.com/FidelLimited/serverless-plugin-optimize
  # only the following paths will be included in the resulting artifact which will be uploaded. Without specific include everything in the current folder will be included
  include:
    - src
    - functions
    - opt
  # The following paths will be excluded from the resulting artifact. If both include and exclude are defined we first apply the include, then the exclude so files are guaranteed to be excluded
  exclude:
    - tmp
    - .git
    - .idea
    - no
    - scripts
    - migrations

functions:
# UNAUTHENTICATED METHODS
  version:
    handler: src/version.router
    description: returns the version and git information for this deployment
    events:
      - http: GET version

  hook:
    handler: src/hook.router
    description: hooks are for notifications from kloudless, mailchimp and stripe
    events:
      - http:
          path: 'hook/{action+}'
          method: ANY

# OAUTH connect & callback endpoints

#  callback:
#    handler: src/link.callback
#    timeout: 120
#    events:
#      - http:
#          path: callback/{serviceType}
#          method: get
#          response: ${self:custom.standardResponses}
#          integration: lambda
#          cors: true
#          request:
#            parameters:
#              querystrings:
#                code: true # code querystring parameter is required.
#
#  connect:
#    handler: src/link.connect
#    timeout: 120
#    events:
#      - http:
#          path: connect/{serviceType}
#          method: get
#          response: ${self:custom.standardResponses}
#          integration: lambda
#          cors: true


  auth:
    handler: src/auth.router
    description: auth methods (login/register/status)
    events:
      - http:
          path: 'auth/{action+}'
          method: ANY
          cors: true

  # user methods (plan/update)
  user:
    handler: src/user.router
    events:
      - http:
          path: 'user/{action+}'
          method: POST
          cors: true

  # book methods (create/find/delete)
  book:
    handler: src/book.router
    events:
      - http:
          path: 'book'
          method: ANY
          cors: true
      - http:
          path: 'book/{id}'
          method: DELETE
          cors: true
      - http:
          path: 'book/{id}'
          method: POST
          cors: true
  storage:
    handler: src/storage.router
    timeout: 300 #TODO, this should be returned back to default.
    memorySize: 128
    events:
      - http:
          path: 'storage/{action+}'
          method: ANY
          cors: true

# the following methods are unauthetnicated, but require a catalogToken.
  catalog:
    handler: src/catalog.router
    events:
      - http:
          path: 'catalog/{catalogToken}'
          method: GET
      - http:
          path: 'catalog/{catalogToken}/{action}'
          method: GET
      - http:
          path: 'catalog/{catalogToken}/{action}/{actionId}'
          method: GET


#  catalogauthors:
#    handler: src/catalog.authors
#    events:
#    - http: GET catalog/{catalogToken}/authors/{page}

  # this function is processed async and triggered by Lambda Invoke calls.
  queueprocessunknownbook:
    memorySize: 256
    handler: src/queue.process_unknown_book

  # this process runs whenever a book is added to upload bucket.
  # it will then look up the book data in DB and migrate it to the correct
  # storage provider.
  queueprocesss3uploaded_book:
    memorySize: 256
    handler: src/queue.process_s3_uploaded_book
    events:
      - s3:
          bucket: ${self:service}-${opt:stage, self:provider.stage}-upload
          event: s3:ObjectCreated:*

  # this process runs async whenever a user decides to delete a credential from his/her library.
  # it will loop though all the books that match that credential, and then queue them up for deletion.
  queueprocessdeletecredentialbooks:
    memorySize: 256
    timeout: 300
    handler: src/queue.process_delete_credential_books

  # when provided a specific book id, credential id and user id, this function will
  # delete the specified book from db, and the associated s3 cover art.
  queueprocessdeletebook:
    memorySize: 256
    handler: src/queue.process_delete_book

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    $ref: ./cloudformation-resources.yaml

plugins:
   - serverless-prune-plugin
   - serverless-mocha-plugin
   - serverless-dynamodb-autoscaling
#   - serverless-plugin-optimize
#   - serverless-offline