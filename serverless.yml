# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: quietthyme-api # NOTE: update this with your service name

provider:
  cfLogs: true
  name: aws
  stage: 'beta'
  region: us-east-1
  timeout: 40 # optional, default is 6
  runtime: nodejs4.3
  memorySize: 128

  #these vpc rules are required because we've hardcoded postgres connection during testing.
  #in prod, this will be specified dynamically via cloudformation.
  # because of issues like: https://github.com/serverless/serverless/issues/2780 on first deploy make sure to comment out
  # the vpc section, and uncomment it after a successful deploy.
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DetachNetworkInterface"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
  vpc:
    securityGroupIds:
      - sg-bbb818c3
    subnetIds:
      - subnet-afea3085
      - subnet-297de85f

custom:
  variables:
    master:
      cleanup_enabled: true
    beta:
      cleanup_enabled: false
    DOMAIN: api.quietthyme.com
    DEPLOY_SHA: ${env:CIRCLE_SHA1}
    STAGE: ${opt:stage, self:provider.stage}
    ENCRYPTION_PASSPHRASE: ${env:${opt:stage, self:provider.stage}_ENCRYPTION_PASSPHRASE, env:ENCRYPTION_PASSPHRASE}
    ENCRYPTION_JWT_PASSPHRASE: ${env:${opt:stage, self:provider.stage}_ENCRYPTION_JWT_PASSPHRASE, env:ENCRYPTION_JWT_PASSPHRASE}
    OAUTH_BOX_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_BOX_CLIENT_KEY, env:OAUTH_BOX_CLIENT_KEY}
    OAUTH_BOX_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_BOX_CLIENT_SECRET, env:OAUTH_BOX_CLIENT_SECRET}
    OAUTH_DROPBOX_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_DROPBOX_CLIENT_KEY, env:OAUTH_DROPBOX_CLIENT_KEY}
    OAUTH_DROPBOX_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_DROPBOX_CLIENT_SECRET, env:OAUTH_DROPBOX_CLIENT_SECRET}
    OAUTH_GOOGLE_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_GOOGLE_CLIENT_KEY, env:OAUTH_GOOGLE_CLIENT_KEY}
    OAUTH_GOOGLE_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_GOOGLE_CLIENT_SECRET, env:OAUTH_GOOGLE_CLIENT_SECRET}
    OAUTH_SKYDRIVE_CLIENT_KEY: ${env:${opt:stage, self:provider.stage}_OAUTH_SKYDRIVE_CLIENT_KEY, env:OAUTH_SKYDRIVE_CLIENT_KEY}
    OAUTH_SKYDRIVE_CLIENT_SECRET: ${env:${opt:stage, self:provider.stage}_OAUTH_SKYDRIVE_CLIENT_SECRET, env:OAUTH_SKYDRIVE_CLIENT_SECRET}

    PG_CONNECTION_STRING: ${env:${opt:stage, self:provider.stage}_PG_CONNECTION_STRING, env:PG_CONNECTION_STRING}
    CLOUDRAIL_API_KEY: ${env:${opt:stage, self:provider.stage}_CLOUDRAIL_API_KEY, env:CLOUDRAIL_API_KEY}
  writeEnvVars:
    DOMAIN: ${self:custom.variables.DOMAIN}
    DEPLOY_SHA: ${self:custom.variables.DEPLOY_SHA}
    STAGE: ${self:custom.variables.STAGE}
    ENCRYPTION_PASSPHRASE: ${self:custom.variables.ENCRYPTION_PASSPHRASE}
    ENCRYPTION_JWT_PASSPHRASE: ${self:custom.variables.ENCRYPTION_JWT_PASSPHRASE}

    OAUTH_BOX_CLIENT_KEY: ${self:custom.variables.OAUTH_BOX_CLIENT_KEY}
    OAUTH_BOX_CLIENT_SECRET: ${self:custom.variables.OAUTH_BOX_CLIENT_SECRET}
    OAUTH_DROPBOX_CLIENT_KEY: ${self:custom.variables.OAUTH_DROPBOX_CLIENT_KEY}
    OAUTH_DROPBOX_CLIENT_SECRET: ${self:custom.variables.OAUTH_DROPBOX_CLIENT_SECRET}
    OAUTH_GOOGLE_CLIENT_KEY: ${self:custom.variables.OAUTH_GOOGLE_CLIENT_KEY}
    OAUTH_GOOGLE_CLIENT_SECRET: ${self:custom.variables.OAUTH_GOOGLE_CLIENT_SECRET}
    OAUTH_SKYDRIVE_CLIENT_KEY: ${self:custom.variables.OAUTH_SKYDRIVE_CLIENT_KEY}
    OAUTH_SKYDRIVE_CLIENT_SECRET: ${self:custom.variables.OAUTH_SKYDRIVE_CLIENT_SECRET}

    PG_CONNECTION_STRING: ${self:custom.variables.PG_CONNECTION_STRING}
    CLOUDRAIL_API_KEY: ${self:custom.variables.CLOUDRAIL_API_KEY}
    DEBUG: knex:*,pool2
    NODE_ENV: production


# you can add packaging information here
package:
  # only the following paths will be included in the resulting artifact which will be uploaded. Without specific include everything in the current folder will be included
  include:
    - src
    - functions
  # The following paths will be excluded from the resulting artifact. If both include and exclude are defined we first apply the include, then the exclude so files are guaranteed to be excluded
  exclude:
    - tmp
    - .git
    - .idea
    - no

functions:
# UNAUTHENTICATED METHODS
  version:
    handler: src/version.handler
    events:
      - http:
          path: version
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

# OAUTH connect & callback endpoints

  callback:
    handler: src/link.callback
    events:
      - http:
          path: callback/{serviceType}
          method: get
#          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true
          request:
            parameters:
              querystrings:
                code: true # code querystring parameter is required.

  connect:
    handler: src/link.connect
    events:
      - http:
          path: connect/{serviceType}
          method: get
#          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true


# auth methods (login/register/calibre)
  authregister:
    handler: handler.auth_register
    events:
      - http: GET auth/register
  authlogin:
    handler: handler.auth_login
    events:
      - http: GET auth/login
  authcalibre:
    handler: handler.auth_calibre
    events:
      - http: GET auth/calibre

# Authenticated API Methods
  authstatus:
    handler: handler.auth_status
    events:
      - http: GET auth/status

  bookcreate:
    handler: handler.book_create
    events:
      - http: POST book

  bookfind:
    handler: handler.book_find
    events:
      - http: GET book

  bookdestroy:
    handler: handler.book_destroy
    events:
      - http: DELETE book/{id}

  storagestatus:
    handler: handler.storage_status
    events:
      - http: GET storage/status

  storageupload:
    handler: handler.storage_upload
    events:
      - http: POST storage/upload

  storagethumbupload:
    handler: handler.storage_thumb_upload
    events:
      - http: POST storage/thumb/upload

  storagelink:
    handler: handler.storage_link
    events:
      - http: GET storage/{id}

#   you can add any of the following events
#   events:
#     - http:
#         path: users/create
#         method: get
#     - s3: ${bucket}
#     - schedule: rate(10 minutes)
#     - sns: greeter-topic

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    $ref: ./cloudformation-resources.json

plugins:
   - serverless-plugin-write-env-vars