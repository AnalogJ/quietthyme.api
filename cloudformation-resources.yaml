---

QuietThymeContentBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: "${self:service}-${opt:stage, self:provider.stage}-content"

QuietThymeContentBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    PolicyDocument:
      Id: Grant read-only access to public users
      Statement:
      - Sid: PublicReadPerms
        Effect: Allow
        Principal: "*"
        Action:
        - s3:GetObject
        Resource:
          Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: "QuietThymeContentBucket"
            - "/*"
    Bucket:
      Ref: "QuietThymeContentBucket"

# serverless has issues if we create a bucket in CF and reference it as an event.
# so we're going to let serverless create the bucket, and only reference it in CF policy
# https://github.com/serverless/serverless/issues/2967
# https://serverless.com/framework/docs/providers/aws/guide/resources/#aws-cloudformation-resource-reference

#QuietThymeUploadBucket:
#  Type: AWS::S3::Bucket
#  Properties:
#    BucketName: "${self:service}-${opt:stage, self:provider.stage}-upload"


QuietThymeUploadBucketPolicy:
  DependsOn: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"
  Type: AWS::S3::BucketPolicy
  Properties:
    PolicyDocument:
      Id: Grant access readonly access to public users
      Statement:
      - Sid: PublicReadPerms
        Effect: Allow
        Principal: "*"
        Action:
        - s3:GetObject
        Resource:
          Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"
            - "/*"
    Bucket:
      Ref: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"


QuietThymeUsersTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    AttributeDefinitions:
    - AttributeName: uid
      AttributeType: S
    - AttributeName: email
      AttributeType: S
    - AttributeName: catalog_token
      AttributeType: S
    KeySchema:
    - AttributeName: uid
      KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    GlobalSecondaryIndexes:
    - IndexName: "emailIndex",
      KeySchema:
      - AttributeName: "email",
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    - IndexName: "catalogIndex"
      KeySchema:
      - AttributeName: "catalog_token",
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    TableName: "${self:service}-${opt:stage, self:provider.stage}-users"
QuietThymeCredsTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    AttributeDefinitions:
    - AttributeName: id
      AttributeType: S
    - AttributeName: service_id
      AttributeType: S
    - AttributeName: user_id
      AttributeType: S
    KeySchema:
    - AttributeName: id
      KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    GlobalSecondaryIndexes:
    - IndexName: "serviceIdIndex",
      KeySchema:
      - AttributeName: "service_id",
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    - IndexName: "userIdIndex",
      KeySchema:
      - AttributeName: "user_id",
        KeyType: "HASH"
      - AttributeName: "id",
        KeyType: "RANGE"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    TableName: "${self:service}-${opt:stage, self:provider.stage}-credentials"
QuietThymeBooksTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    AttributeDefinitions:
    - AttributeName: user_id
      AttributeType: S
    - AttributeName: id
      AttributeType: S
    KeySchema:
    - AttributeName: user_id
      KeyType: HASH
    - AttributeName: id
      KeyType: RANGE
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    TableName: "${self:service}-${opt:stage, self:provider.stage}-books"