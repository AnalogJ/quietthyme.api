---

QuietThymeContentBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: "${self:service}-${opt:stage, self:provider.stage}-content"

QuietThymeContentBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    PolicyDocument:
      Id: Grant read-only access to public users
      Statement:
      - Sid: PublicReadPerms
        Effect: Allow
        Principal: "*"
        Action:
        - s3:GetObject
        Resource:
          Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: "QuietThymeContentBucket"
            - "/*"
    Bucket:
      Ref: "QuietThymeContentBucket"

# serverless has issues if we create a bucket in CF and reference it as an event.
# so we're going to let serverless create the bucket, and only reference it in CF policy
# https://github.com/serverless/serverless/issues/2967
# https://serverless.com/framework/docs/providers/aws/guide/resources/#aws-cloudformation-resource-reference

#QuietThymeUploadBucket:
#  Type: AWS::S3::Bucket
#  Properties:
#    BucketName: "${self:service}-${opt:stage, self:provider.stage}-upload"


QuietThymeUploadBucketPolicy:
  DependsOn: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"
  Type: AWS::S3::BucketPolicy
  Properties:
    PolicyDocument:
      Id: Grant access readonly access to public users
      Statement:
      - Sid: PublicReadPerms
        Effect: Allow
        Principal: "*"
        Action:
        - s3:GetObject
        Resource:
          Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"
            - "/*"
    Bucket:
      Ref: "S3BucketQuietthymeapi${opt:stage, self:provider.stage}upload"


QuietThymeUsersTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    TableName: "${self:service}-${opt:stage, self:provider.stage}-users"
    AttributeDefinitions:
    - AttributeName: uid
      AttributeType: S
    - AttributeName: email
      AttributeType: S
    - AttributeName: catalog_token
      AttributeType: S
    KeySchema:
    - AttributeName: uid
      KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    GlobalSecondaryIndexes:
    - IndexName: "emailIndex"
      KeySchema:
      - AttributeName: "email"
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    - IndexName: "catalogIndex"
      KeySchema:
      - AttributeName: "catalog_token"
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
QuietThymeCredsTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    TableName: "${self:service}-${opt:stage, self:provider.stage}-credentials"
    AttributeDefinitions:
    - AttributeName: id
      AttributeType: S
    - AttributeName: service_id
      AttributeType: S
    - AttributeName: user_id
      AttributeType: S
    KeySchema:
    - AttributeName: id
      KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    GlobalSecondaryIndexes:
    - IndexName: "serviceIdIndex"
      KeySchema:
      - AttributeName: "service_id"
        KeyType: "HASH"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    - IndexName: "userIdIndex"
      KeySchema:
      - AttributeName: "user_id"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      Projection:
        ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
QuietThymeBooksTable:
  Type: AWS::DynamoDB::Table
  DeletionPolicy: Retain
  Properties:
    TableName: "${self:service}-${opt:stage, self:provider.stage}-books2"
    AttributeDefinitions:
    - AttributeName: user_id
      AttributeType: S
    - AttributeName: id
      AttributeType: S
    - AttributeName: updated_at
      AttributeType: S
    - AttributeName: title
      AttributeType: S
    - AttributeName: primary_author
      AttributeType: S
#    - AttributeName: series_name
#      AttributeType: S
    KeySchema:
    - AttributeName: user_id
      KeyType: HASH
    - AttributeName: id
      KeyType: RANGE
    ProvisionedThroughput:
      ReadCapacityUnits: '5'
      WriteCapacityUnits: '5'
    LocalSecondaryIndexes:
    - IndexName: "updated_atSort"
      KeySchema:
      - AttributeName: "user_id"
        KeyType: "HASH"
      - AttributeName: "updated_at"
        KeyType: "RANGE"
      Projection:
        ProjectionType: "ALL"

    - IndexName: "titleSort"
      KeySchema:
      - AttributeName: "user_id"
        KeyType: "HASH"
      - AttributeName: "title"
        KeyType: "RANGE"
      Projection:
        ProjectionType: "ALL"

    - IndexName: "primary_authorSort"
      KeySchema:
      - AttributeName: "user_id"
        KeyType: "HASH"
      - AttributeName: "primary_author"
        KeyType: "RANGE"
      Projection:
        ProjectionType: "ALL"

#    - IndexName: "series_nameSort"
#      KeySchema:
#      - AttributeName: "user_id"
#        KeyType: "HASH"
#      - AttributeName: "series_name"
#        KeyType: "RANGE"
#      Projection:
#        ProjectionType: "ALL"

## DynamoDB Autoscaling Configuration:
## https://forums.aws.amazon.com/thread.jspa?messageID=798577
## https://gist.github.com/TrentBartlem/292be37d496361d551fff6659d87fb0e
## https://github.com/sbstjn/serverless-dynamodb-autoscaling
#DynamoDBAutoscalingRole:
#  Type: AWS::IAM::Role
#  Properties:
#    AssumeRolePolicyDocument:
#      Version: "2012-10-17"
#      Statement:
#        -
#          Effect: "Allow"
#          Principal:
#            Service:
#              - "application-autoscaling.amazonaws.com"
#          Action:
#            - "sts:AssumeRole"
#    Policies:
#      - PolicyName: lambdaIAMRolePolicy
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action:
#                - dynamodb:DescribeTable
#                - dynamodb:UpdateTable
#              Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:*/${self:service}-${opt:stage, self:provider.stage}-*"
#            - Effect: Allow
#              Action:
#                - cloudwatch:SetAlarmState
#                - cloudwatch:GetMetricStatistics
#                - cloudwatch:DescribeAlarms
#                - cloudwatch:PutMetricAlarm
#                - cloudwatch:DeleteAlarms
#              Resource: "*"
#
#QuietThymeBooksReadScalingTarget:
#  Type: AWS::ApplicationAutoScaling::ScalableTarget
#  Properties:
#    MinCapacity: 1
#    MaxCapacity: 10
#    ResourceId: "${self:service}-${opt:stage, self:provider.stage}-books"
#    RoleARN: !GetAtt dynamodbAutoscalingRole.Arn
#    ScalableDimension: dynamodb:table:ReadCapacityUnits
#    ServiceNamespace: dynamodb
#
#QuietThymeBooksReadScalingPolicy:
#  Type: AWS::ApplicationAutoScaling::ScalingPolicy
#  Properties:
#    PolicyName: QuietThymeBooksReadScalingPolicy
#    PolicyType: TargetTrackingScaling
#    ScalingTargetId: !Ref QuietThymeBooksReadScalingTarget
#    TargetTrackingScalingPolicyConfiguration:
#      PredefinedMetricSpecification:
#        PredefinedMetricType: DynamoDBReadCapacityUtilization
#      ScaleInCooldown: 60
#      ScaleOutCooldown: 60
#      TargetValue: 75
#
#QuietThymeBooksWriteScalingTarget:
#  Type: AWS::ApplicationAutoScaling::ScalableTarget
#  Properties:
#    MinCapacity: 1
#    MaxCapacity: 10
#    ResourceId: "${self:service}-${opt:stage, self:provider.stage}-books"
#    RoleARN: !GetAtt dynamodbAutoscalingRole.Arn
#    ScalableDimension: dynamodb:table:WriteCapacityUnits
#    ServiceNamespace: dynamodb
#
#QuietThymeBooksWriteScalingPolicy:
#  Type: AWS::ApplicationAutoScaling::ScalingPolicy
#  Properties:
#    PolicyName: QuietThymeBooksWriteScalingPolicy
#    PolicyType: TargetTrackingScaling
#    ScalingTargetId: !Ref QuietThymeBooksWriteScalingTarget
#    TargetTrackingScalingPolicyConfiguration:
#      PredefinedMetricSpecification:
#        PredefinedMetricType: DynamoDBWriteCapacityUtilization
#      ScaleInCooldown: 60
#      ScaleOutCooldown: 60
#      TargetValue: 75